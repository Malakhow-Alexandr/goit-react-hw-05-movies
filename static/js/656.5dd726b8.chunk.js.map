{"version":3,"file":"static/js/656.5dd726b8.chunk.js","mappings":"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","sources":["utils/transformMovieDetailsData.js","utils/fetchMovieDetals.js","components/MovieDescription/MovieDescription.styled.jsx","components/MovieDescription/MovieDescription.jsx","components/AdditionalInformation/AdditionalInformation.styled.jsx","components/AdditionalInformation/AdditionalInformation.jsx","components/BackLink/BackLink.styled.jsx","components/BackLink/BackLink.jsx","pages/MoviesDetails/MovieDetails.jsx","utils/formatReleaseDate.js","utils/transformTrendingMovieData.js"],"sourcesContent":["import { formatReleaseDate } from './formatReleaseDate';\nimport { defaultPic } from './transformTrendingMovieData';\n\nexport const transformMovieDetailsData = data => {\n  const hiRating = 10;\n\n  return data.map(\n    ({\n      id,\n      genres,\n      title,\n      vote_average,\n      overview,\n      release_date: release,\n      poster_path: poster,\n    }) => ({\n      id,\n      title,\n      release: `(${formatReleaseDate(release)})`,\n      genres: `${genres.map(ganre => ganre.name).join(', ')}`,\n      poster: !poster ? defaultPic : `https://image.tmdb.org/t/p/w500${poster}`,\n      userScore: `User Score: ${Math.floor((vote_average / hiRating) * 100)}%`,\n      overview,\n    })\n  );\n};\n","import axios from 'axios';\nimport { transformMovieDetailsData } from './transformMovieDetailsData';\n\nconst API_KEY = '23b29489e8683674f60bf34658264370';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  language: 'en-US',\n  api_key: API_KEY,\n};\n\nexport const fetchMovieDetails = async (id, controller) => {\n  const { data } = await axios.get(`/movie/${id}`, {\n    signal: controller.signal,\n  });\n  const dataArr = [];\n  dataArr.push(data);\n\n  const movie = transformMovieDetailsData(dataArr);\n\n  return movie;\n};\n","import styled from '@emotion/styled';\n\nexport const Section = styled.section`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const Poster = styled.img`\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n`;\n","import PropTypes from 'prop-types';\n\nimport { Poster, Section } from './MovieDescription.styled';\n\nconst MovieDescription = ({ movie }) => {\n  return (\n    <>\n      {movie.map(movie => {\n        const { release, genres, overview, poster, title, userScore, id } =\n          movie;\n        return (\n          <Section key={id}>\n            <Poster src={poster} alt={title} width=\"350px\" height=\"525px\" />\n            <div>\n              <h2>\n                {title} <span>{release}</span>\n              </h2>\n              <p>{userScore}</p>\n              <h3>Overview</h3>\n              <p>{overview}</p>\n              <h4>Genres</h4>\n              <p>{genres}</p>\n            </div>\n          </Section>\n        );\n      })}\n    </>\n  );\n};\nexport default MovieDescription;\n\nMovieDescription.propTypes = {\n  movie: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      genres: PropTypes.string.isRequired,\n      overview: PropTypes.string.isRequired,\n      poster: PropTypes.string.isRequired,\n      release: PropTypes.string.isRequired,\n      userScore: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const SectionInformation = styled.section`\n  padding: 15px 0px;\n`;\nexport const MetaContainer = styled.div`\n  padding: 10px;\n  border-top: 1px solid black;\n  border-bottom: 1px solid black;\n  box-shadow: rgba(33, 35, 38, 0.1) 0px 10px 10px -10px;\n`;\nexport const InformationTitle = styled.h2`\n  margin: 0;\n  padding: 0;\n`;\n\nexport const InformationList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 7px;\n`;\n\nexport const InformationLink = styled(Link)`\n  text-decoration: none;\n  font-weight: 500;\n  color: #000;\n  transition: color 250ms ease;\n  &:hover {\n    color: #03039c;\n  }\n`;\n","import { Outlet } from 'react-router-dom';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport { Suspense } from 'react';\n\nimport {\n  SectionInformation,\n  MetaContainer,\n  InformationTitle,\n  InformationList,\n  InformationLink,\n} from './AdditionalInformation.styled';\n\nconst AdditionalInformation = () => {\n  return (\n    <SectionInformation>\n      <MetaContainer>\n        <InformationTitle>Additional information</InformationTitle>\n        <InformationList>\n          <li>\n            <InformationLink to=\"cast\">Cast</InformationLink>\n          </li>\n          <li>\n            <InformationLink to=\"reviews\">Reviews</InformationLink>\n          </li>\n        </InformationList>\n      </MetaContainer>\n\n      <Suspense\n        fallback={\n          <div style={{ marginLeft: '420px', marginRight: 'auto' }}>\n            <ThreeCircles\n              height=\"80\"\n              width=\"80\"\n              wrapperClass=\"spinner-wrapper\"\n              ariaLabel=\"three-circles-rotating\"\n              outerCircleColor=\"#0a598d\"\n              innerCircleColor=\"#260a8d\"\n              middleCircleColor=\"#6a0474\"\n            />\n          </div>\n        }\n      >\n        <Outlet />\n      </Suspense>\n    </SectionInformation>\n  );\n};\n\nexport default AdditionalInformation;\n","import { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;\n","import { HiArrowLeft } from 'react-icons/hi';\n\nimport { StyledLink } from './BackLink.styled';\n\nconst BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\nexport default BackLink;\n","import { useState, useEffect, useRef } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { fetchMovieDetails } from 'utils/fetchMovieDetals';\nimport MovieDescription from 'components/MovieDescription/MovieDescription';\nimport AdditionalInformation from 'components/AdditionalInformation/AdditionalInformation';\nimport BackLink from 'components/BackLink/BackLink';\nimport { ThreeCircles } from 'react-loader-spinner';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    setLoading(true);\n\n    const fetchDetailsData = async () => {\n      try {\n        const response = await fetchMovieDetails(movieId, abortController);\n        setMovie(response);\n      } catch (error) {\n        setError(error);\n\n        if (error?.message !== 'canceled') {\n          console.log(error);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchDetailsData();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <main>\n      {error && error.message !== 'canceled' && (\n        <p>Sorry we have error:{error.message} please reload page!</p>\n      )}\n      {movie.length === 0 && (\n        <div style={{ marginLeft: '420px', marginRight: 'auto' }}>\n          <ThreeCircles\n            height=\"80\"\n            width=\"80\"\n            wrapperClass=\"spinner-wrapper\"\n            ariaLabel=\"three-circles-rotating\"\n            outerCircleColor=\"#0a598d\"\n            innerCircleColor=\"#260a8d\"\n            middleCircleColor=\"#6a0474\"\n          />\n        </div>\n      )}\n      {!loading && movie.length > 0 && (\n        <BackLink to={backLinkLocationRef.current}>Back</BackLink>\n      )}\n      {!loading && movie.length > 0 && <MovieDescription movie={movie} />}\n      {!loading && movie.length > 0 && <AdditionalInformation />}\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import { format } from 'date-fns';\n\nexport const formatReleaseDate = date => {\n  return format(Date.parse(date), 'y');\n};\n","import { formatReleaseDate } from './formatReleaseDate';\nexport const defaultPic =\n  'https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg';\n\nexport const transformTrendingMovieData = data => {\n  return data['results'].map(\n    ({\n      id,\n      release_date: release,\n      title,\n      vote_average: rating,\n      poster_path: poster,\n    }) => {\n      return {\n        id,\n        title,\n        rating: `⭐${Math.round(rating)}`,\n        poster: !poster\n          ? defaultPic\n          : `https://image.tmdb.org/t/p/w500${poster}`,\n        release: !release ? `(unknown)` : `(${formatReleaseDate(release)})`,\n      };\n    }\n  );\n};\n"],"names":["transformMovieDetailsData","data","map","id","genres","title","vote_average","overview","release","release_date","poster","poster_path","formatReleaseDate","ganre","name","join","defaultPic","userScore","Math","floor","axios","language","api_key","fetchMovieDetails","controller","signal","dataArr","push","movie","Section","styled","Poster","src","alt","width","height","SectionInformation","MetaContainer","InformationTitle","InformationList","InformationLink","Link","to","Suspense","fallback","style","marginLeft","marginRight","wrapperClass","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","StyledLink","children","size","useState","setMovie","loading","setLoading","error","setError","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","abortController","AbortController","fetchDetailsData","response","message","console","log","abort","length","current","date","format","Date","parse","transformTrendingMovieData","rating","round"],"sourceRoot":""}