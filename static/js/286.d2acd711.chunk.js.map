{"version":3,"file":"static/js/286.d2acd711.chunk.js","mappings":"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","sources":["components/MovieListItem/MovieListItem.styled.jsx","components/MovieListItem/MovieListItem.jsx","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","components/SearchBar/SearchBarStyled.jsx","components/SearchBar/SearhBar.jsx","utils/fetchMovieByname.js","pages/Movies/Movies.jsx","utils/formatReleaseDate.js","utils/transformTrendingMovieData.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Item = styled.li`\n  margin-left: auto;\n  margin-right: auto;\n  width: 220px;\n  border-radius: 10px;\n  overflow: hidden;\n`;\nexport const Picture = styled.img`\n  border-radius: 10px;\n`;\nexport const LinkStyled = styled(Link)`\n  text-decoration: none;\n  position: relative;\n`;\nexport const Rating = styled.p`\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  top: -10px;\n  left: 177px;\n  font-weight: bold;\n  color: #83cf57;\n  font-size: 18px;\n  transition: color 250ms ease, transform 250ms ease;\n  &:hover {\n    color: red;\n    transform: scale(1.2);\n  }\n`;\nexport const Release = styled.p`\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  top: -10px;\n  left: 7px;\n  font-weight: bold;\n  color: #83cf57;\n  transition: color 250ms ease, transform 250ms ease;\n  &:hover {\n    color: red;\n    transform: scale(1.2);\n  }\n`;\n\nexport const Title = styled.p`\n  padding: 0;\n  margin: 0px;\n  font-size: 18px;\n  font-weight: bold;\n  color: #000;\n  .link:hover & {\n    color: #6e02ac;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport {\n  Item,\n  LinkStyled,\n  Rating,\n  Picture,\n  Release,\n  Title,\n} from './MovieListItem.styled';\n\nconst MovieListItem = ({ movies, location }) => {\n  return (\n    <>\n      {movies.map(({ id, title, rating, poster, release }) => (\n        <Item key={id}>\n          <LinkStyled\n            className=\"link\"\n            to={`/movies/${id}`}\n            state={{ from: location }}\n          >\n            <Picture src={poster} alt={title} width=\"220px\" height=\"315px\" />\n            <Title>{title}</Title>\n            <Rating>{rating}</Rating>\n            <Release>{release}</Release>\n          </LinkStyled>\n        </Item>\n      ))}\n    </>\n  );\n};\n\nexport default MovieListItem;\n\nMovieListItem.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      rating: PropTypes.string.isRequired,\n      poster: PropTypes.string.isRequired,\n      release: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n  location: PropTypes.shape({\n    hash: PropTypes.string.isRequired,\n    key: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n    search: PropTypes.string.isRequired,\n    state: PropTypes.object,\n  }).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const MovieListStyled = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0;\n  gap: 15px;\n`;\n","import MovieListItem from 'components/MovieListItem/MovieListItem';\nimport { MovieListStyled } from './MovieList.styled';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies, location }) => {\n  return (\n    <MovieListStyled>\n      <MovieListItem movies={movies} location={location} />\n    </MovieListStyled>\n  );\n};\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      rating: PropTypes.string.isRequired,\n      poster: PropTypes.string.isRequired,\n      release: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n  location: PropTypes.shape({\n    hash: PropTypes.string.isRequired,\n    key: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n    search: PropTypes.string.isRequired,\n    state: PropTypes.object,\n  }).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const SearchBarStyled = styled.section`\n  width: 960px;\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  padding: 10px 0px;\n  align-items: center;\n  min-height: 64px;\n  color: #fff;\n  background-color: #0d1230;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://cdn-icons-png.flaticon.com/512/3252/3252873.png');\n  background-size: 80%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchButtonLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\n\nimport {\n  SearchBarStyled,\n  SearchForm,\n  SearchButton,\n  SearchButtonLabel,\n  SearchFormInput,\n} from './SearchBarStyled';\n\nexport const SearchBar = ({ onSubmit }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (searchQuery.trim() === '') {\n      toast.error('🍳Please enter somthing to search!', {\n        theme: 'dark',\n      });\n      return;\n    }\n    onSubmit(searchQuery);\n    setSearchQuery('');\n  };\n\n  return (\n    <main>\n      <SearchBarStyled className=\"Searchbar\">\n        <SearchForm className=\"SearchForm\" onSubmit={handleSubmit}>\n          <SearchButton className=\"SearchForm-button\" type=\"submit\">\n            <SearchButtonLabel className=\"SearchForm-button-label\">\n              Find\n            </SearchButtonLabel>\n          </SearchButton>\n          <SearchFormInput\n            placeholder=\"Hello I am Movie Search!\"\n            className=\"SearchForm-input\"\n            type=\"text\"\n            name=\"movieName\"\n            value={searchQuery}\n            onChange={event => setSearchQuery(event.target.value)}\n          />\n        </SearchForm>\n      </SearchBarStyled>\n    </main>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import axios from 'axios';\nimport { transformTrendingMovieData } from './transformTrendingMovieData';\n\nconst API_KEY = '23b29489e8683674f60bf34658264370';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  language: 'en-US',\n  api_key: API_KEY,\n};\n\nexport const fetchMovieByName = async (query, controller) => {\n  const { data } = await axios.get(`/search/movie?query=${query}`, {\n    signal: controller.signal,\n  });\n  const movies = transformTrendingMovieData(data);\n\n  return movies;\n};\n","import { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { SearchBar } from 'components/SearchBar/SearhBar';\nimport MoviesList from 'components/MovieList/MovieList';\nimport { fetchMovieByName } from 'utils/fetchMovieByname';\nimport { toast } from 'react-toastify';\nimport { ThreeCircles } from 'react-loader-spinner';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const movieName = searchParams.get('name') ?? '';\n\n  const location = useLocation();\n\n  useEffect(() => {\n    if (movieName === '') {\n      return;\n    }\n\n    const abortController = new AbortController();\n\n    setLoading(true);\n\n    const fetchMovieByNameData = async () => {\n      try {\n        const response = await fetchMovieByName(movieName, abortController);\n        if (response.length === 0) {\n          toast.error(`🍳There is no data with ${movieName} name!`, {\n            theme: 'dark',\n          });\n          return;\n        }\n        setMovies(response);\n      } catch (error) {\n        setError(error);\n\n        if (error?.message !== 'canceled') {\n          toast.error(\n            `🍳Sorry we have an error with this ${movieName} film! Please try to search later `,\n            {\n              theme: 'dark',\n            }\n          );\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMovieByNameData();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieName]);\n\n  const updateQueryString = name => {\n    if (name === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ name });\n  };\n  return (\n    <main>\n      <SearchBar value={movieName} onSubmit={updateQueryString} />\n\n      {movies.length === 0 && error && error.message !== 'canceled' && (\n        <p>Sorry we have error:{error.message} please reload page!</p>\n      )}\n\n      {loading && (\n        <div\n          style={{\n            marginLeft: '420px',\n            marginRight: 'auto',\n            marginTop: '30px',\n          }}\n        >\n          <ThreeCircles\n            height=\"80\"\n            width=\"80\"\n            wrapperClass=\"spinner-wrapper\"\n            ariaLabel=\"three-circles-rotating\"\n            outerCircleColor=\"#0a598d\"\n            innerCircleColor=\"#260a8d\"\n            middleCircleColor=\"#6a0474\"\n          />\n        </div>\n      )}\n      {!loading && movies.length === 0 && (\n        <>\n          <img\n            style={{\n              display: 'block',\n              marginLeft: 'auto',\n              marginRight: 'auto',\n              marginTop: '20px',\n            }}\n            src=\"https://kalishlawtexas.com/wp-content/uploads/2020/10/AddressConfidentiality-progam.jpg\"\n            width=\"400px\"\n            alt=\"search\"\n          />\n          <p style={{ textAlign: 'center', fontWeight: 'bold' }}>\n            Please enter movie name to search!\n          </p>\n        </>\n      )}\n      {movies && <MoviesList movies={movies} location={location} />}\n    </main>\n  );\n};\n\nexport default Movies;\n","import { format } from 'date-fns';\n\nexport const formatReleaseDate = date => {\n  return format(Date.parse(date), 'y');\n};\n","import { formatReleaseDate } from './formatReleaseDate';\nexport const defaultPic =\n  'https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg';\n\nexport const transformTrendingMovieData = data => {\n  return data['results'].map(\n    ({\n      id,\n      release_date: release,\n      title,\n      vote_average: rating,\n      poster_path: poster,\n    }) => {\n      return {\n        id,\n        title,\n        rating: `⭐${Math.round(rating)}`,\n        poster: !poster\n          ? defaultPic\n          : `https://image.tmdb.org/t/p/w500${poster}`,\n        release: !release ? `(unknown)` : `(${formatReleaseDate(release)})`,\n      };\n    }\n  );\n};\n"],"names":["Item","styled","Picture","LinkStyled","Link","Rating","Release","Title","movies","location","map","id","title","rating","poster","release","className","to","state","from","src","alt","width","height","MovieListStyled","SearchBarStyled","SearchForm","SearchButton","SearchButtonLabel","SearchFormInput","SearchBar","onSubmit","useState","searchQuery","setSearchQuery","event","preventDefault","trim","toast","theme","type","placeholder","name","value","onChange","target","axios","language","api_key","fetchMovieByName","query","controller","signal","data","transformTrendingMovieData","setMovies","error","setError","loading","setLoading","useSearchParams","searchParams","setSearchParams","movieName","get","useLocation","useEffect","abortController","AbortController","fetchMovieByNameData","response","length","message","abort","style","marginLeft","marginRight","marginTop","wrapperClass","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","display","textAlign","fontWeight","formatReleaseDate","date","format","Date","parse","defaultPic","release_date","vote_average","poster_path","Math","round"],"sourceRoot":""}