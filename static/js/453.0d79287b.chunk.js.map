{"version":3,"file":"static/js/453.0d79287b.chunk.js","mappings":"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","sources":["components/ActorListItem.jsx/ActorListItem.styled.jsx","components/ActorListItem.jsx/ActorListItem.jsx","components/ActorList/ActorList.styled.jsx","utils/transformActorListData.js","utils/fetchActorList.js","components/ActorList/ActorList.jsx","utils/formatReleaseDate.js","utils/transformTrendingMovieData.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ActorItem = styled.li`\n  max-width: 176px;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 5px 15px 0px;\n  padding-bottom: 3px;\n  border-radius: 10px;\n  overflow: hidden;\n`;\nexport const ActorPhoto = styled.img`\n  width: 100%;\n  height: 264px;\n`;\n\nexport const ActorName = styled.p`\n  margin: 3px 0px 5px 5px;\n  padding: 0;\n  font-weight: 500;\n`;\n\nexport const ActorRole = styled.p`\n  margin: 0px 0px 3px 5px;\n  padding: 0;\n  font-weight: 500;\n  font-size: 15px;\n  & span {\n    font-weight: bold;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport {\n  ActorPhoto,\n  ActorItem,\n  ActorName,\n  ActorRole,\n} from './ActorListItem.styled';\n\nconst ActorListItem = ({ actorList }) => {\n  return (\n    <>\n      {actorList.map(({ id, character, name, photo }) => (\n        <ActorItem key={id}>\n          <ActorPhoto src={photo} alt={name} width=\"176px\" height=\"264px\" />\n          <ActorName>{name}</ActorName>\n          <ActorRole>\n            <span>Character:</span> {character}\n          </ActorRole>\n        </ActorItem>\n      ))}\n    </>\n  );\n};\n\nexport default ActorListItem;\n\nActorListItem.propTypes = {\n  actorList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      photo: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ActorListStyled = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n","import { defaultPic } from './transformTrendingMovieData';\n\nexport const transformActorData = data =>\n  data['cast'].map(({ id, profile_path: photo, name, character }) => ({\n    id,\n    character,\n    name,\n    photo: !photo ? defaultPic : `https://image.tmdb.org/t/p/w500${photo}`,\n  }));\n","import { transformActorData } from './transformActorListData';\nimport axios from 'axios';\n\nconst API_KEY = '23b29489e8683674f60bf34658264370';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  language: 'en-US',\n  api_key: API_KEY,\n};\n\nexport const fetchActorList = async (id, controller) => {\n  const { data } = await axios.get(`/movie/${id}/credits`, {\n    signal: controller.signal,\n  });\n  const actorData = transformActorData(data);\n\n  return actorData;\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ActorListItem from 'components/ActorListItem.jsx/ActorListItem';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport { ActorListStyled } from './ActorList.styled';\nimport { fetchActorList } from 'utils/fetchActorList';\n\nconst ActorList = () => {\n  const [actorList, setActorList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    setLoading(true);\n\n    const fetchActorData = async () => {\n      try {\n        const response = await fetchActorList(movieId, abortController);\n        setActorList(response);\n      } catch (error) {\n        setError(error);\n\n        if (error?.message !== 'canceled') {\n          console.log(error);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchActorData();\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      {error && error.message !== 'canceled' && (\n        <p>Sorry we have error:{error.message} please reload page!</p>\n      )}\n\n      {loading && (\n        <div style={{ marginLeft: '420px', marginRight: 'auto' }}>\n          <ThreeCircles\n            height=\"80\"\n            width=\"80\"\n            wrapperClass=\"spinner-wrapper\"\n            ariaLabel=\"three-circles-rotating\"\n            outerCircleColor=\"#0a598d\"\n            innerCircleColor=\"#260a8d\"\n            middleCircleColor=\"#6a0474\"\n          />\n        </div>\n      )}\n      <ActorListStyled>\n        <ActorListItem actorList={actorList} />\n      </ActorListStyled>\n    </>\n  );\n};\nexport default ActorList;\n","import { format } from 'date-fns';\n\nexport const formatReleaseDate = date => {\n  return format(Date.parse(date), 'y');\n};\n","import { formatReleaseDate } from './formatReleaseDate';\nexport const defaultPic =\n  'https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg';\n\nexport const transformTrendingMovieData = data => {\n  return data['results'].map(\n    ({\n      id,\n      release_date: release,\n      title,\n      vote_average: rating,\n      poster_path: poster,\n    }) => {\n      return {\n        id,\n        title,\n        rating: `‚≠ê${Math.round(rating)}`,\n        poster: !poster\n          ? defaultPic\n          : `https://image.tmdb.org/t/p/w500${poster}`,\n        release: !release ? `(unknown)` : `(${formatReleaseDate(release)})`,\n      };\n    }\n  );\n};\n"],"names":["ActorItem","styled","ActorPhoto","ActorName","ActorRole","actorList","map","id","character","name","photo","src","alt","width","height","ActorListStyled","transformActorData","data","profile_path","defaultPic","axios","language","api_key","fetchActorList","controller","signal","actorData","useState","setActorList","loading","setLoading","error","setError","movieId","useParams","useEffect","abortController","AbortController","fetchActorData","response","message","console","log","abort","style","marginLeft","marginRight","wrapperClass","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","formatReleaseDate","date","format","Date","parse","transformTrendingMovieData","release","release_date","title","rating","vote_average","poster","poster_path","Math","round"],"sourceRoot":""}